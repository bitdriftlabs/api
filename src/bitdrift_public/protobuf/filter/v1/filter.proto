// api - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";

import "validate/validate.proto";
import "bitdrift_public/protobuf/client/v1/matcher.proto";
import "bitdrift_public/protobuf/matcher/v1/log_matcher.proto";

package bitdrift_public.protobuf.filter.v1;

// The configuration of filters that apply transforms to selected logs.
message FiltersConfiguration {
  repeated Filter filters = 1;
}

// Applies configured transform to selected logs.
message Filter {
  // The matcher responsible for selecting logs to apply the filter's transforms to.
  matcher.v1.LogMatcher matcher = 1 [(validate.rules).message = {required: true}];

  // Optional matcher that allows targetting the filter to a given client context. If not present, the filter
  // is sent to all clients.
  bitdrift_public.protobuf.client.v1.RootMatcher context_matcher = 5;

  string

  // Represents a transform that can be applied to a log in order to modify it.
  message Transform {
    oneof transform_type {
      option (validate.required) = true;

      CaptureField capture_field = 1;
      SetField set_field = 2;
      RemoveField remove_field = 3;
      RegexMatchAndSubstituteField regex_match_and_substitute_field = 4;
    }

    // Captures specified matching field(s). Capturing a field means storing it in a buffer and potentially uploading
    // it to bitdrift remote services. The final decision on whether a field is stored and uploaded depends
    // on various factors, such as buffer and workflow configurations.
    // * If the specified matching field doesn't exist, nothing happens.
    // * If the field exists and has already been captured, nothing happens.
    message CaptureField {
      // The name of the field to capture.
      string name = 1 [(validate.rules).string = {min_len: 1}];
    }

    // Sets the value of a field with a specified name to a given value.
    message SetField {
      enum FieldType {
        UNKNOWN = 0;
        CAPTURED = 1;
        MATCHING_ONLY = 2;
      }

      message SetFieldValue {
        // The existing field. The field can be either a captured or a matching field. Capture fields take
        // precedence over matching fields.
        message ExistingField {
          // The name of an existing field.
          string name = 1 [(validate.rules).string = {min_len: 1}];
        }

        oneof value {
          option (validate.required) = true;

          // The constant string value.
          string string_value = 1;
          // The value of an existing field.
          ExistingField existing_field = 2;
        }
      }

      string name = 1 [(validate.rules).string = {min_len: 1}];
      // The value to set the field to.
      SetFieldValue value = 2 [(validate.rules).message.required = true];
      // The type of the field to set.
      FieldType field_type = 3 [(validate.rules).enum = {defined_only: true not_in: 0}];
      // Whether a transform is allowed to override an existing field. If no and the field already exists,
      // the transform is a no-op.
      bool allow_override = 4;
    }

    // Removes a field with the specified name from the list of captured or matching fields.
    // If the field doesn't exist, no action is taken.
    message RemoveField {
      // The name of the field to remove.
      string name = 1 [(validate.rules).string = {min_len: 1}];
    }

    // Matches the processed field and specifies how to generate a new string using a given regular
    // expression and substitution string.
    message RegexMatchAndSubstituteField {
      // The name of the field to scrub. If the field doesn't exist, nothing happens.
      string name = 1 [(validate.rules).string = {min_len: 1}];
      // The regular expression used to find portions of a string that should be replaced.
      // It follows Rust's regular expression syntax. Capture groups can be used to extract portions
      // of the input string and reference them later in a `substitution` string.
      string pattern = 2 [(validate.rules).string = {min_len: 1}];
      // The string that will replace the matching portions of the subject string.
      // Capture groups from the `pattern` regular expression can be referenced in this string using Rust's
      // regex syntax. For example, `${1}` refers to the first capture group from the `pattern` regular
      // expression.
      string substitution = 3 [(validate.rules).string = {min_len: 1}];
    }
  }

  // The list of transforms to apply to a selected log.
  // Transforms are applied in the specified order.
  repeated Transform transforms = 2 [(validate.rules).repeated = {min_items: 1}];
}
