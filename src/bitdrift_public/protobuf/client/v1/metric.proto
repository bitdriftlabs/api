// api - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

package bitdrift_public.protobuf.client.v1;

// Used to track an index of pending aggregations that need to be uploaded. This is used by the
// file manager to coordinate merging and uploads.
message PendingAggregationIndex {
  message PendingFile {
    // Name of the file to upload.
    string name = 1;
    // The start of the period that this file covers. All metrics are aggregated over this period.
    google.protobuf.Timestamp period_start = 2;
    // True if an aggregation is ready to upload and should no longer be written to.
    bool ready_to_upload = 3;
  }
  // List of files, in order of period_start, that are pending upload.
  repeated PendingFile pending_files = 1;
}

message Counter {
  // Deprecated do not use this. At some point we will reserve this field and remove it.
  uint32 value_deprecated = 1;

  // The value to report for this counter. For now this will be the aggregated value of this
  // counter since the last time the client sucessfully uploaded stats, but might change as
  // we start supporting non-aggregated snapshots (see StatsUploadRequest::Snapshot).
  uint64 value = 2;
}

// Deprecated and no longer supported by the SaaS. This is kept here do that we can better keep
// track of how many of this type of metric is still being reported.
message FixedBucketHistogram {
  message Bucket {
    double less_than_equal_to = 1;
    uint64 count = 2;
  }

  // Buckets with defined <= semantics. These should be in sorted order, where each larger bucket
  // contains the counts from all previous buckets. This is based on Prometheus exposition format.
  repeated Bucket fixed_buckets = 1;

  // This is the bucket equivalent to the Prometheus {le="+Inf"} bucket. It gives the count of all
  // samples. Any samples that did not fit in the fixed buckets can be inferred from this count.
  uint64 count = 2;

  // This is the sum of all samples.
  double sum = 3;
}

// A histogram in DDSketch format.
message DDSketchHistogram {
  // The sketch as serialized by https://github.com/loyispa/sketches-rust. For now the index
  // parameters are opaque and are assumed to be processed by the server as needed. If in the future
  // we need more specific client side indication of the sketch parameters, we can either add them
  // here or introduce different types of histograms in the oneof below.
  bytes serialized = 1;
}

// Inline histogram values sent directly without sketching. The client can decide dynamically that
// it is more efficient to send individual values than to maintain a sketch. In this case it will
// send the values directly where they can be aggregated by the server.
message InlineHistogramValues {
  // Values to aggregate.
  repeated double values = 1;
}

message Metric {
  // Unique name of this metric.
  string name = 1 [(validate.rules).string = {min_len: 1}];

  // Tags associated with this metric.
  map<string, string> tags = 2;

  oneof data {
    option (validate.required) = true;

    Counter counter = 3;

    // Deprecated per above.
    FixedBucketHistogram fixed_bucket_histogram_deprecated = 4;

    DDSketchHistogram ddsketch_histogram = 5;

    InlineHistogramValues inline_histogram_values = 6;
  }
}

message MetricsList {
  repeated Metric metric = 1;
}
